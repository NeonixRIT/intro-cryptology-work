from functools import cache

MIX_MATRIX = [
    [0x02, 0x03, 0x01, 0x01],
    [0x01, 0x02, 0x03, 0x01],
    [0x01, 0x01, 0x02, 0x03],
    [0x03, 0x01, 0x01, 0x02]
]

MIX_MATRIX_INV = [
    [0x0e, 0x0b, 0x0d, 0x09],
    [0x09, 0x0e, 0x0b, 0x0d],
    [0x0d, 0x09, 0x0e, 0x0b],
    [0x0b, 0x0d, 0x09, 0x0e]
]

S_BOX = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

S_BOX_INV = [
    [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
    [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
    [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
    [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
    [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
    [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
    [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
    [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
    [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
    [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
    [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
    [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
    [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
    [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
    [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]
]

ROUND_CONSTANTS = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]

IR_POLY = 0x11b


# @cache
def xor_words(a: bytes, b: bytes) -> bytes:
    return bytes([a[i] ^ b[i] for i in range(len(a))])


def words_to_bytes(words: list[bytes]) -> bytes:
    return bytes([byte for word in words for byte in word])


# @cache
def GF_256_multiply(a: int, b: int) -> int:
    '''
    Handles multiplication in GF(2^8)
    '''
    p = 0
    for _ in range(8):
        if b & 1:  # Rightmost bit of b is set
            p ^= a  # Exclusive OR (polynomial addition)
        carry = a & 0x80  # Leftmost bit of a
        a <<= 1  # Shift a one bit to the left
        if carry:  # If carry had a value of one
            a ^= 0x1b  # Exclusive OR with 0x1b
        b >>= 1  # Shift b one bit to the right
    return p % 256


class State:
    def __init__(self, data: bytes):
        self.__columns = [list(data[i:i + 4]) for i in range(0, len(data), 4)]

    def __str__(self) -> str:
        return '\n'.join([str([f'0x{hex(self.__columns[i][j])[2:].zfill(2).upper()}' for i in range(4)])[1:-1] for j in range(4)]).replace('\'', '').replace(',', '')

    def __repr__(self) -> str:
        return self.__str__()

    def __getitem__(self, index: int) -> list[int]:
        return self.__columns[index]

    def __setitem__(self, index: int, value: list[int]):
        self.__columns[index] = value

    def __iter__(self):
        return iter(self.__columns)

    def __len__(self) -> int:
        return len(self.__columns)

    def shift_rows(self, inverse: bool = False):
        result = [[0] * len(self[0]) for _ in range(len(self))]
        for i in range(4):
            for j in range(4):
                new_i = ((i + j) if inverse else (i - j)) % 4
                result[new_i][j] = self[i][j]
        self.__columns = result

    def xor(self, other) -> None:
        for i in range(4):
            for j in range(4):
                self[i][j] ^= other[i][j]

    def mix_columns(self, inverse: bool = False):
        matrix = MIX_MATRIX_INV if inverse else MIX_MATRIX
        result = [[0] * len(self[0]) for _ in range(len(matrix))]
        for i in range(len(matrix)):
            for j in range(len(self[0])):
                for k in range(len(self)):
                    result[j][i] ^= GF_256_multiply(matrix[i][k], self[j][k])
        self.__columns = result

    def to_bytes(self) -> bytes:
        return words_to_bytes(self.__columns)


class AES:
    def __init__(self, Nk: int, Nr: int):
        self.block_size = 128
        self.key_size = Nk * 32
        self.Nr = Nr
        self.Nk = Nk

    def _byte_substitution(self, state: list[bytes] | bytes, inverse: bool = False) -> bytes:
        s_box = S_BOX_INV if inverse else S_BOX
        poly_bytes = [b for row in state for b in row] if isinstance(state[0], list) else [s for s in state]
        for i, byte in enumerate(poly_bytes):
            row = (byte & 0xf0) >> 4
            col = byte & 0x0f
            poly_bytes[i] = s_box[row][col]
        return bytes(poly_bytes)

    def _g(self, word: bytes, i: int) -> bytes:
        shifted = word[1:] + word[:1]
        subbed = list(self._byte_substitution(shifted))
        xor_rc = subbed[0] ^ ROUND_CONSTANTS[i]
        rcond = bytes([xor_rc] + subbed[1:])
        return bytes(rcond)

    def _ksa(self, key: bytes):
        # Split key bytes into appropriate number of words for key length
        if len(key) * 8 != self.key_size:
            raise ValueError(f'Invalid key length {len(key) * 8}. Expected {self.key_size}.')
        words = [key[i:i + 4] for i in range(0, len(key), 4)]

        # Return 128 bit round keys of initial key until 128 bits of initial key are not left
        i = 0
        while len(words) - i >= 4:
            yield words_to_bytes(words[i:i + 4])
            i += 4

        # Generate round keys, 1 word at a time, yeilding last 4 words every 4 words generated
        temp = words[-1]
        for i in range(self.Nk, self.Nr * 4 + 4):
            temp = words[-1]
            if i % self.Nk == 0:
                temp = self._g(temp, (i // self.Nk) - 1)
            elif len(words) % 4 == 0 and self.key_size == 256:
                temp = self._byte_substitution(temp)
            temp = xor_words(words[i - self.Nk], temp)
            words.append(temp)
            if (i + 1) % 4 == 0:
                yield words_to_bytes(words[-4:])

    def encrypt_block(self, block: bytes, key: bytes) -> bytes:
        keys = [State(round_key) for round_key in self._ksa(key)]
        state = State(block)

        # First Round
        state.xor(keys[0])

        # Rest of The Rounds Except Last
        for i in range(1, self.Nr):
            state = State(self._byte_substitution(state)) # Substitute Bytes
            state.shift_rows() # Shift Rows
            state.mix_columns() # Mix Columns
            state.xor(keys[i]) # Add Round Key

        # Last Round
        state = State(self._byte_substitution(state)) # Substitute Bytes
        state.shift_rows() # Shift Rows
        state.xor(keys[-1]) # Add Round Key
        return state.to_bytes()

    def decrypt_block(self, block: bytes, key: bytes) -> bytes:
        keys = [State(round_key) for round_key in self._ksa(key)][::-1]
        state = State(block)

        # First Round
        state.xor(keys[0])

        # Rest of The Rounds Except Last
        for i in range(1, self.Nr):
            state.shift_rows(inverse=True) # Inverse Shift Rows
            state = State(self._byte_substitution(state, inverse=True)) # Inverse Substitute Bytes
            state.xor(keys[i]) # Add Round Key
            state.mix_columns(inverse=True) # Inverse Mix Columns

        # Last Round
        state.shift_rows(inverse=True) # Inverse Shift Rows
        state = State(self._byte_substitution(state, inverse=True)) # Inverse Substitute Bytes
        state.xor(keys[-1]) # Add Round Key
        return state.to_bytes()

# TODO: Implement different modes of opperation. ECB, CBC, CFB, OFB, CTR, GCM, etc.
